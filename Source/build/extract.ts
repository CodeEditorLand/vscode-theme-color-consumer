/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/

import { existsSync, writeFileSync } from "fs";
import { resolve } from "path";
import * as execa from "execa";
import * as prettier from "prettier";

const vscodeDir = process.argv[2]
	? resolve(process.cwd(), process.argv[2])
	: resolve(__dirname, "../../../vscode");
if (!existsSync(vscodeDir)) {
	throw new Error(
		`Cannot find VS Code in path ${vscodeDir}, specify a valid relative path`,
	);
}

const defaultDefaults = { light: null, dark: null, hc: null };

(async () => {
	const execution = await execa(
		resolve(
			vscodeDir,
			process.platform === "win32"
				? "./scripts/test.bat"
				: "./scripts/test.sh",
		),
		[
			"-g",
			"ColorRegistry exports",
			"--runGlob",
			"**/{colorRegistryExport.test,workbench.common.main}.js",
		],
		{
			cwd: vscodeDir,
			env: {
				...process.env,
				VSCODE_COLOR_REGISTRY_EXPORT: "1",
			},
		},
	);

	const match = /#colors:(.+)/.exec(execution.stderr);

	if (!match) {
		throw new Error(`No colors in match output: ${execution.stderr}`);
	}

	const header = `/*---------------------------------------------------------
  * Copyright (C) Microsoft Corporation. All rights reserved.
  *--------------------------------------------------------*/

 // AUTOGENERATED WITH \`yarn extract\`, DO NOT EDIT MANUALLY

 import { ColorDefaults } from './colorValue';

 `;

	let typeDef = "export type ColorIdentifier =";

	let mapDef =
		"export const colorDefaults = new Map<ColorIdentifier, ColorDefaults>([";

	for (const color of JSON.parse(match[1].trim())) {
		if (color.deprecationMessage) {
			typeDef += `\n/** @deprecated ${color.deprecationMessage} */\n`;
		}

		typeDef += ` | "${color.id}"`;

		const { light, dark, hc } = color.defaults || defaultDefaults;

		mapDef += `["${color.id}", ${JSON.stringify([light, dark, hc])}],`;
	}

	typeDef += ";\n\n";

	mapDef += "]);\n\n";

	const outpath = resolve(__dirname, "../../src/colorDefaults.ts");

	const formatted = prettier.format(header + typeDef + mapDef, {
		...(await prettier.resolveConfig(outpath)),
		filepath: outpath,
	});

	writeFileSync(outpath, formatted, "utf-8");
})().catch((err) => {
	console.error(err);

	process.exit(1);
});
